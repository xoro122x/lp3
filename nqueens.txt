public class nqueen {

    public static void qPlace(char board[][], int row) {
        if (row == board.length) {
            count++;
            pBoard(board);
            return;
        }

        for (int j = 0; j < board.length; j++) {
            if (isSafe(board, row, j)) {
                board[row][j] = 'Q';
                qPlace(board, row + 1);
                board[row][j] = 'X';
            }
        }
    }

    

    public static boolean isSafe(char board[][] , int row , int col){
        // verticle down the column 
        for(int i=row-1  ; i>=0 ;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }

        // for left diagonal down
        for(int i=row , j=col ; i>=0 && j>=0 ;i-- ,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        // for right diagonal down
        for(int i=row ,j=col ;i>=0 && j<board.length ; i-- ,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        return true;
    }

    public static void pBoard(char board[][]) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println("");
        }
        System.out.println("-----------------------");
    }

    static int count = 0 ;

    public static void main(String args[]) {
        int n = 4;
        char board[][] = new char[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = 'X';
            }
        }

        qPlace(board, 0);
        System.out.println("Number of ways queens can be placed are " + count);

       

}
}